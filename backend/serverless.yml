service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  # - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todos API
        description: Serverless Todos application
    models:
      - name: "TodosRequest"
        contentType: application/json
        schema: ${file(request-validators/create-todo-request.json)}

functions:

  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true


  # # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': "TodosRequest"


  # # TODO: Configure this function
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId # partitionKey
            AttributeType: S
          # - AttributeName: todoId # indexKey
          #   AttributeType: S
          # - AttributeName: createdAt # sortKey
          #   AttributeType: S
        KeySchema:
          - AttributeName: todoId # partitionKey
            KeyType: HASH
          # - AttributeName: todoId # sortKey
          #   KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
      # LocalSecondaryIndexes:
      #   - IndexName: ${self:provider.environment.INDEX_NAME}
      #     KeySchema:
      #       - AttributeName: partitionKey
      #         KeyType: HASH
      #       - AttributeName: indexKey
      #         KeyType: RANGE
      #     Projection:
      #       ProjectionType: ALL # What attributes will be copied to an index